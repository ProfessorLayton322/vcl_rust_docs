var searchIndex = new Map(JSON.parse('[\
["vcl_rust",{"doc":"Rust version of Agner Fog’s vectorclass lib","t":"TFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["LEN","Vec4f","abs","add","add_assign","approx_recipr","approx_rsqrt","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","change_sign","clone","cutoff","default","div","div_assign","eq","eq","fmt","from","from","from","from_scalar","get","get_unchecked","horizontal_add","index","insert","into","load","load_aligned","load_partial","max","min","mul","mul_assign","neg","new","pow","round","sign_combine","sqrt","squared","store","store_aligned","store_aligned_nocache","store_partial","sub","sub_assign","truncate","try_from","try_into","type_id"],"q":[[0,"vcl_rust"],[58,"core::fmt"],[59,"core::fmt"],[60,"core::result"],[61,"core::any"]],"d":["Associated const - size of the packed vector","Packed array of four <code>f32</code> values that can be used for SIMD …","Returns a vector containing absolute values of the …","","","Fast approximate calculation of reciprocal (i.e. <code>1 / self</code>)","Fast approximate of reverse square root (i.e. …","","","","","","","","","Changes signs of vector values chosen by compile-time …","","Cuts vector to <code>size</code>, replaces all tail values by zeroes …","","","","","","","","Returns the argument unchanged.","","Returns <code>Vec4f</code> that contains four values of type <code>f32</code> equal …","Return reference to <code>f32</code> value by <code>index</code>. Returns <code>None</code> if …","Returns reference to <code>f32</code> value by <code>index</code>","Calculates the sum of all vector values","","Inserts <code>f32</code> value to the chosen <code>index</code> and returns the …","Calls <code>U::from(self)</code>.","Loads values from float slice","Loads values from float slice aligned by <code>16</code> bytes","Copies values from <code>buffer</code> slice to the vector. If …","Chooses maximum for each index from two vectors, returns …","Chooses minimum for each index from two vectors, returns …","","","","Returns <code>Vec4f</code> that contains four <code>f32</code> values that are equal …","Raises every every value of the vector and returns a copy","Rounds all values to closest integer and returns modified …","Returns value of <code>a</code> with sign inverted if <code>b</code> has it’s sign …","Returns a vector containing square roots of all values of …","Squares every value of the vector and returns a copy","Copies values of the vector to a mutable slice","Copies values of the vector to a mutable slice. Address of …","Copies values of the vector to a mutable aligned slice …","Copies values of the vector to a mutable slice. Works for …","","","Truncates all values towards zero and return modified copy","","",""],"i":[1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"``{bb}{{bb}b}{{bb}d}22101010{ce{}{}}033{{bf}b}{{}b}43{{b{j{h}}}l}{{bb}l}{{bn}A`}{{{j{h}}}b}{cc{}}{{{Ab{h}}}b}{hb}{{bf}{{Ad{h}}}}{{bf}h}{bh}1{{bfh}b}={{b{Ab{h}}}d}00{{bb}b}00{{bb}d}{bb}{{hhhh}b}{{bAf}b}24225555432{c{{Ah{e}}}{}{}}0{cAj{}}","c":[],"p":[[5,"Vec4f",0],[1,"unit"],[1,"usize"],[1,"f32"],[1,"array"],[1,"bool"],[5,"Formatter",58],[8,"Result",58],[1,"slice"],[6,"Option",59],[1,"i32"],[6,"Result",60],[5,"TypeId",61]],"b":[[21,"impl-PartialEq%3C%5Bf32;+4%5D%3E-for-Vec4f"],[22,"impl-PartialEq-for-Vec4f"],[24,"impl-From%3C%5Bf32;+4%5D%3E-for-Vec4f"],[26,"impl-From%3C%26%5Bf32%5D%3E-for-Vec4f"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
